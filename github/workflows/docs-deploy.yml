name: Documentation Deployment

on:
  push:
    branches:
      - main
      - fix-docs-workflow  # Temporary: for testing this branch
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Python Dependencies
        run: |
          echo "🐍 Installing Python documentation dependencies..."
          pip install sphinx sphinx-rtd-theme

      - name: Build Rust Documentation
        run: |
          echo "📚 Building Rust documentation..."
          cargo doc --all-features --no-deps --document-private-items
          echo "✅ Rust documentation build completed"
          ls -la target/doc/

      - name: Build Python Documentation
        run: |
          echo "🐍 Building Python documentation..."
          cd docs/python
          sphinx-build -b html source build
          echo "✅ Python documentation build completed"
          ls -la build/

      - name: Create Documentation Site
        run: |
          echo "🏗️ Creating documentation site..."
          set -e  # Exit on any error
          
          # Create main directory
          mkdir -p docs-site
          echo "✅ Created docs-site directory"
          
          # Check if required files exist
          echo "🔍 Checking required files..."
          if [ ! -f "simple-index.html" ]; then
            echo "❌ simple-index.html not found!"
            ls -la simple-index.html || echo "File does not exist"
            exit 1
          fi
          echo "✅ simple-index.html found"
          
          if [ ! -d "target/doc" ]; then
            echo "❌ target/doc directory not found!"
            ls -la target/ || echo "target directory does not exist"
            exit 1
          fi
          echo "✅ target/doc directory found"
          echo "Contents of target/doc:"
          ls -la target/doc/ | head -10
          
          if [ ! -d "docs/python/build" ]; then
            echo "❌ docs/python/build directory not found!"
            ls -la docs/python/ || echo "docs/python directory does not exist"
            exit 1
          fi
          echo "✅ docs/python/build directory found"
          echo "Contents of docs/python/build:"
          ls -la docs/python/build/ | head -10
          
          if [ ! -d "docs/js" ]; then
            echo "❌ docs/js directory not found!"
            ls -la docs/ || echo "docs directory does not exist"
            exit 1
          fi
          echo "✅ docs/js directory found"
          echo "Contents of docs/js:"
          ls -la docs/js/
          
          # Copy Rust docs
          echo "📋 Copying Rust documentation..."
          mkdir -p docs-site/rust
          cp -r target/doc/* docs-site/rust/ || {
            echo "❌ Failed to copy Rust docs"
            ls -la target/doc/
            exit 1
          }
          # Create redirect for Rust docs
          cat > docs-site/rust/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="refresh" content="0; url=veloxx">
    <title>Redirecting to Veloxx Documentation</title>
</head>
<body>
    <p>Redirecting to <a href="veloxx">Veloxx documentation</a>...</p>
</body>
</html>
EOF
          echo "✅ Rust docs copied"
          
          # Copy Python docs
          echo "📋 Copying Python documentation..."
          mkdir -p docs-site/python
          cp -r docs/python/build/* docs-site/python/ || {
            echo "❌ Failed to copy Python docs"
            ls -la docs/python/build/
            exit 1
          }
          echo "✅ Python docs copied"
          
          # Copy JavaScript docs
          echo "📋 Copying JavaScript documentation..."
          mkdir -p docs-site/js
          cp -r docs/js/* docs-site/js/ || {
            echo "❌ Failed to copy JavaScript docs"
            ls -la docs/js/
            exit 1
          }
          echo "✅ JavaScript docs copied"
          
          # Create main index page
          echo "📋 Creating main index page..."
          cp simple-index.html docs-site/index.html || {
            echo "❌ Failed to copy main index page"
            ls -la simple-index.html
            exit 1
          }
          echo "✅ Main index page created"
          
          # Verify the final structure
          echo "🔍 Final documentation site structure:"
          find docs-site -type f | head -20
          echo "📊 Total files created:"
          find docs-site -type f | wc -l
          
          echo "🎉 Documentation site creation completed successfully!"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-site/

  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4