name: Code Quality & Security

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-quality:
    name: Rust Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-quality-${{ hashFiles('**/Cargo.lock') }}

      - name: Check Rust Formatting
        run: |
          echo "üé® Checking Rust code formatting..."
          cargo fmt --all -- --check

      - name: Run Clippy (All Features)
        run: |
          echo "üîç Running Clippy lints..."
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Clippy (Core)
        run: cargo clippy --all-targets -- -D warnings

      - name: Run Clippy (Python Feature)
        run: cargo clippy --all-targets --features python -- -D warnings

      - name: Run Clippy (WASM Feature)
        run: cargo clippy --all-targets --features wasm -- -D warnings

      - name: Check Documentation
        run: |
          echo "üìö Checking documentation..."
          cargo doc --all-features --no-deps --document-private-items

  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python Quality Tools
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Python Formatting (Black)
        run: |
          echo "üé® Checking Python code formatting..."
          black --check --diff tests/python/

      - name: Check Import Sorting (isort)
        run: |
          echo "üì¶ Checking import sorting..."
          isort --check-only --diff tests/python/

      - name: Run Flake8 Linting
        run: |
          echo "üîç Running Flake8 linting..."
          flake8 tests/python/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run Bandit Security Check
        run: |
          echo "üîí Running security checks..."
          bandit -r tests/python/ -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            echo "üìã Bandit security report generated"
            cat bandit-report.json
          fi

  javascript-quality:
    name: JavaScript Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm install

      - name: Install Quality Tools
        run: |
          npm install -g eslint prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin

      - name: Check JavaScript Formatting
        run: |
          echo "üé® Checking JavaScript code formatting..."
          prettier --check "tests/**/*.js" "*.js" || echo "‚ö†Ô∏è Formatting issues found"

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint..."
          npx eslint tests/**/*.js *.js --ext .js || echo "‚ö†Ô∏è Linting issues found"

  dependency-check:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Rust Security Audit
        run: |
          echo "üîí Running Rust security audit..."
          cargo audit

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Dependencies
        run: npm install

      - name: Node.js Security Audit
        run: |
          echo "üîí Running Node.js security audit..."
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è Node.js vulnerabilities found"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Safety
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Python Security Audit
        run: |
          echo "üîí Running Python security audit..."
          pip freeze | safety check --stdin || echo "‚ö†Ô∏è Python vulnerabilities found"

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check Rust Dependencies Licenses
        run: |
          echo "üìú Checking Rust dependency licenses..."
          cargo license --json > rust-licenses.json
          echo "‚úÖ Rust license check completed"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check Node.js Dependencies Licenses
        run: |
          echo "üìú Checking Node.js dependency licenses..."
          npm install
          license-checker --json > node-licenses.json || echo "‚ö†Ô∏è License check completed with warnings"

      - name: Archive License Reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            rust-licenses.json
            node-licenses.json

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-perf-${{ hashFiles('**/Cargo.lock') }}

      - name: Check Binary Size
        run: |
          echo "üìè Checking binary sizes..."
          cargo build --release
          ls -lh target/release/
          echo "‚úÖ Binary size check completed"

      - name: Run Quick Benchmarks
        run: |
          echo "‚ö° Running quick performance checks..."
          if [ -d "benches" ]; then
            cargo bench --bench '*' -- --test
          else
            echo "‚ÑπÔ∏è No benchmarks found"
          fi

  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Check Documentation Build
        run: |
          echo "üìö Building documentation..."
          cargo doc --all-features --no-deps --document-private-items

      - name: Check for Missing Documentation
        run: |
          echo "üîç Checking for missing documentation..."
          cargo doc --all-features --no-deps 2>&1 | grep -i "warning.*missing" || echo "‚úÖ No missing documentation warnings"

      - name: Validate README
        run: |
          echo "üìñ Validating README..."
          if [ -f "README.md" ]; then
            echo "‚úÖ README.md exists"
            wc -l README.md
          else
            echo "‚ùå README.md not found"
            exit 1
          fi

      - name: Check CHANGELOG
        run: |
          echo "üìù Checking CHANGELOG..."
          if [ -f "CHANGELOG.md" ]; then
            echo "‚úÖ CHANGELOG.md exists"
            head -10 CHANGELOG.md
          else
            echo "‚ö†Ô∏è CHANGELOG.md not found"
          fi