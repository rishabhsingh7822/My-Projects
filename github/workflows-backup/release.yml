name: Release Automation

on:
  push:
    tags:
      - "v*" # Triggers on tags like v1.0.0, v1.0.0-beta, etc.

env:
  CARGO_TERM_COLOR: always

jobs:
  pre-release-checks:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Validate Version Tag
        run: |
          echo "🏷️ Validating version tag: ${{ github.ref_name }}"
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "✅ Valid version tag format"
          else
            echo "❌ Invalid version tag format"
            exit 1
          fi

      - name: Check Cargo.toml Version
        run: |
          echo "📦 Checking Cargo.toml version..."
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          TAG_VERSION="${{ github.ref_name }}"
          TAG_VERSION="${TAG_VERSION#v}" # Remove 'v' prefix
          
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Git tag version: $TAG_VERSION"
          
          if [ "$CARGO_VERSION" = "$TAG_VERSION" ]; then
            echo "✅ Versions match"
          else
            echo "❌ Version mismatch between Cargo.toml and git tag"
            exit 1
          fi

      - name: Run Full Test Suite
        run: |
          echo "🧪 Running full test suite before release..."
          cargo test --all-features --verbose
          cargo test --doc --verbose

      - name: Check Code Quality
        run: |
          echo "🔍 Running code quality checks..."
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: pre-release-checks
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: veloxx-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: veloxx-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: veloxx-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: veloxx-macos-arm64
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Release Binary
        run: |
          echo "🔨 Building release binary for ${{ matrix.target }}..."
          cargo build --release --target ${{ matrix.target }}

      - name: Create Archive
        shell: bash
        run: |
          echo "📦 Creating release archive..."
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_PATH="target/${{ matrix.target }}/release/veloxx.exe"
            ARCHIVE_NAME="${{ matrix.artifact_name }}.zip"
            7z a $ARCHIVE_NAME $BINARY_PATH
          else
            BINARY_PATH="target/${{ matrix.target }}/release/veloxx"
            ARCHIVE_NAME="${{ matrix.artifact_name }}.tar.gz"
            tar -czf $ARCHIVE_NAME -C target/${{ matrix.target }}/release veloxx
          fi
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ env.ARCHIVE_NAME }}

  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [pre-release-checks, build-artifacts]
    environment: release
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

      - name: Dry Run Publish
        run: |
          echo "🧪 Running dry-run publish to crates.io..."
          cargo publish --dry-run

      - name: Publish to Crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "📦 Publishing to crates.io..."
          cargo publish --token $CARGO_REGISTRY_TOKEN

  publish-python:
    name: Publish Python Wheels
    runs-on: ${{ matrix.os }}
    needs: [pre-release-checks, build-artifacts]
    environment: release
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Build Tools
        run: |
          pip install --upgrade pip
          pip install maturin twine

      - name: Build Python Wheel
        run: |
          echo "🐍 Building Python wheel for ${{ matrix.os }} Python ${{ matrix.python-version }}..."
          maturin build --release --features python

      - name: Upload Wheels to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  publish-python-final:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: publish-python
    environment: release
    
    steps:
      - name: Download All Wheel Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: python-wheels-*
          merge-multiple: true
          path: wheels/

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Twine
        run: pip install twine

      - name: Verify Wheels
        run: |
          echo "🔍 Verifying Python wheels..."
          ls -la wheels/
          twine check wheels/*.whl

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "🐍 Publishing to PyPI..."
          twine upload wheels/*.whl

  publish-wasm:
    name: Publish WASM Package
    runs-on: ubuntu-latest
    needs: [pre-release-checks, build-artifacts]
    environment: release
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org/"

      - name: Build WASM Package
        run: |
          echo "🕸️ Building WASM package..."
          wasm-pack build --target web --out-dir pkg --release --features wasm

      - name: Verify Package
        run: |
          echo "🔍 Verifying WASM package..."
          ls -la pkg/
          cat pkg/package.json

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "📦 Publishing to npm..."
          cd pkg
          npm publish

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-crates, publish-python-final, publish-wasm]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: veloxx-*
          path: release-artifacts/

      - name: Generate Release Notes
        run: |
          echo "📝 Generating release notes..."
          echo "## 🎉 Release ${{ github.ref_name }}" > release-notes.md
          echo "" >> release-notes.md
          echo "### 📦 What's Included" >> release-notes.md
          echo "- **Rust Crate**: Available on [crates.io](https://crates.io/crates/veloxx)" >> release-notes.md
          echo "- **Python Package**: Available on [PyPI](https://pypi.org/project/veloxx/)" >> release-notes.md
          echo "- **WASM Package**: Available on [npm](https://www.npmjs.com/package/veloxx)" >> release-notes.md
          echo "" >> release-notes.md
          echo "### 🚀 Installation" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "# Rust" >> release-notes.md
          echo "cargo add veloxx" >> release-notes.md
          echo "" >> release-notes.md
          echo "# Python" >> release-notes.md
          echo "pip install veloxx" >> release-notes.md
          echo "" >> release-notes.md
          echo "# JavaScript/WASM" >> release-notes.md
          echo "npm install veloxx" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          echo "" >> release-notes.md
          echo "### 📋 Binary Downloads" >> release-notes.md
          echo "Pre-compiled binaries are available for:" >> release-notes.md
          echo "- Linux x64" >> release-notes.md
          echo "- Windows x64" >> release-notes.md
          echo "- macOS x64" >> release-notes.md
          echo "- macOS ARM64" >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/**/*
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: create-github-release
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Update Documentation
        run: |
          echo "📚 Triggering documentation update..."
          # This could trigger a docs rebuild or update version references

      - name: Notify Success
        run: |
          echo "🎉 Release ${{ github.ref_name }} completed successfully!"
          echo "✅ Published to crates.io"
          echo "✅ Published to PyPI"  
          echo "✅ Published to npm"
          echo "✅ GitHub release created"